import os
import json
import pandas as pd
from supabase import create_client, Client
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)

# Environment variables and constants
BOT_TOKEN = os.environ.get('BOT_TOKEN')
ADMIN_IDS = [os.environ.get('ADMIN_ID_1'), os.environ.get('ADMIN_ID_2'), os.environ.get('ADMIN_ID_3')]
CHANNEL_ID = os.environ.get('CHANNEL_ID')
url: str = os.environ.get("SUPABASE_URL")
key: str = os.environ.get("SUPABASE_KEY")
supabase: Client = create_client(url, key)
SECONDS_IN_DAY = 86400

# Function to kick a user by ID
async def kick_user_by_id(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        await context.bot.ban_chat_member(CHANNEL_ID, user_id)
        await context.bot.unban_chat_member(CHANNEL_ID, user_id)
    except Exception as e:
        print(f"Error kicking user {user_id}: {e}")

# Kick users who haven't made a purchase in 31+ days
async def kick_inactive_users(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Kick users who haven't made a purchase in the last 31 days."""
    current_timestamp = int(datetime.now().timestamp())
    threshold_timestamp = current_timestamp - (31 * SECONDS_IN_DAY)

    # Query users whose subscription expired more than 31 days ago
    response = supabase.table("tasks").select("telegram_user_id", "sub_expiry_time").execute()
    if response.data:
        for task in response.data:
            if task["sub_expiry_time"] < threshold_timestamp:
                user_id = int(task["telegram_user_id"])
                await kick_user_by_id(user_id, context)

                # Remove the user from the tasks table
                supabase.table("tasks").delete().match({"telegram_user_id": task["telegram_user_id"]}).execute()

    # Notify admins
    admin_message = "Inactive users kicked successfully (31+ days since last purchase)."
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=admin_message)
        except Exception as e:
            print(f"Error notifying admin {admin_id}: {e}")

# Kick users with expired 1-day subscriptions
async def kick_one_day_pass_users(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Kick users who purchased a 1-day pass and have expired."""
    current_timestamp = int(datetime.now().timestamp())

    # Query users with 1-day subscriptions
    response = supabase.table("tasks").select("telegram_user_id", "sub_expiry_time").execute()
    if response.data:
        for task in response.data:
            # Check if the subscription expired
            if task["sub_expiry_time"] < current_timestamp:
                user_id = int(task["telegram_user_id"])
                await kick_user_by_id(user_id, context)

                # Remove the user from the tasks table
                supabase.table("tasks").delete().match({"telegram_user_id": task["telegram_user_id"]}).execute()

    # Notify admins
    admin_message = "Expired 1-day pass users kicked successfully."
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=admin_message)
        except Exception as e:
            print(f"Error notifying admin {admin_id}: {e}")

# Telegram bot command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Start command handler."""
    if update.message.chat.type == update.message.chat.PRIVATE:
        await update.message.reply_text(
            "Hello! Choose your subscription plan:",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("1 Month Subscription", callback_data="30")],
                    [InlineKeyboardButton("1 Day Subscription", callback_data="1")],
                ]
            ),
        )

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button clicks."""
    query = update.callback_query
    await query.answer()

    if query.data == "30":
        await query.edit_message_text(
            text="Subscription: 30 days\nCost: 1499 KZT",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("💳 PAY", callback_data="pay_30")],
                    [InlineKeyboardButton("⬅️ BACK", callback_data="back")],
                ]
            ),
        )
    elif query.data == "1":
        await query.edit_message_text(
            text="Subscription: 1 day\nCost: 499 KZT",
            reply_markup=InlineKeyboardMarkup(
                [
                    [InlineKeyboardButton("💳 PAY", callback_data="pay_1")],
                    [InlineKeyboardButton("⬅️ BACK", callback_data="back")],
                ]
            ),
        )

# Admin-triggered commands
async def kick_inactive_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manually trigger the kick_inactive_users function."""
    if str(update.message.from_user.id) in ADMIN_IDS:
        await kick_inactive_users(context)
        await update.message.reply_text("Inactive users kicked.")

async def kick_one_day_pass_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Manually trigger the kick_one_day_pass_users function."""
    if str(update.message.from_user.id) in ADMIN_IDS:
        await kick_one_day_pass_users(context)
        await update.message.reply_text("Expired 1-day pass users kicked.")

# Main function
if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("kickinactive", kick_inactive_command))
    application.add_handler(CommandHandler("kickoneday", kick_one_day_pass_command))

    # Run the bot
    application.run_polling()
# Ensure all functions are defined before adding handlers
async def kick_inactive_users(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Kick users who haven't made a purchase in the last 31 days."""
    current_timestamp = int(datetime.now().timestamp())
    threshold_timestamp = current_timestamp - (31 * SECONDS_IN_DAY)

    response = supabase.table("tasks").select("telegram_user_id", "sub_expiry_time").execute()
    if response.data:
        for task in response.data:
            if task["sub_expiry_time"] < threshold_timestamp:
                user_id = int(task["telegram_user_id"])
                await kick_user_by_id(user_id, context)

                # Remove from the database
                supabase.table("tasks").delete().match({"telegram_user_id": task["telegram_user_id"]}).execute()

    # Notify admins
    admin_message = "Inactive users kicked successfully (31+ days since last purchase)."
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=admin_message)
        except Exception as e:
            print(f"Error notifying admin {admin_id}: {e}")

# Place the handler assignments AFTER defining all functions
if __name__ == "__main__":
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # Add handlers AFTER defining all functions
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("kickinactive", kick_inactive_command))
    application.add_handler(CommandHandler("kickoneday", kick_one_day_pass_command))

    # Run the bot
    application.run_polling()